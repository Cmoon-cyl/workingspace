// Generated by gencpp from file cmoon_msgs/Pose.msg
// DO NOT EDIT!


#ifndef CMOON_MSGS_MESSAGE_POSE_H
#define CMOON_MSGS_MESSAGE_POSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cmoon_msgs
{
template <class ContainerAllocator>
struct Pose_
{
  typedef Pose_<ContainerAllocator> Type;

  Pose_()
    : name()
    , px(0.0)
    , py(0.0)
    , pz(0.0)
    , ox(0.0)
    , oy(0.0)
    , oz(0.0)
    , ow(0.0)  {
    }
  Pose_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , px(0.0)
    , py(0.0)
    , pz(0.0)
    , ox(0.0)
    , oy(0.0)
    , oz(0.0)
    , ow(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef double _px_type;
  _px_type px;

   typedef double _py_type;
  _py_type py;

   typedef double _pz_type;
  _pz_type pz;

   typedef double _ox_type;
  _ox_type ox;

   typedef double _oy_type;
  _oy_type oy;

   typedef double _oz_type;
  _oz_type oz;

   typedef double _ow_type;
  _ow_type ow;





  typedef boost::shared_ptr< ::cmoon_msgs::Pose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cmoon_msgs::Pose_<ContainerAllocator> const> ConstPtr;

}; // struct Pose_

typedef ::cmoon_msgs::Pose_<std::allocator<void> > Pose;

typedef boost::shared_ptr< ::cmoon_msgs::Pose > PosePtr;
typedef boost::shared_ptr< ::cmoon_msgs::Pose const> PoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cmoon_msgs::Pose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cmoon_msgs::Pose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cmoon_msgs::Pose_<ContainerAllocator1> & lhs, const ::cmoon_msgs::Pose_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.px == rhs.px &&
    lhs.py == rhs.py &&
    lhs.pz == rhs.pz &&
    lhs.ox == rhs.ox &&
    lhs.oy == rhs.oy &&
    lhs.oz == rhs.oz &&
    lhs.ow == rhs.ow;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cmoon_msgs::Pose_<ContainerAllocator1> & lhs, const ::cmoon_msgs::Pose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cmoon_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cmoon_msgs::Pose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cmoon_msgs::Pose_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cmoon_msgs::Pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cmoon_msgs::Pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cmoon_msgs::Pose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cmoon_msgs::Pose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cmoon_msgs::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bcfa53d5e4d8be1ea92a3489e7b58000";
  }

  static const char* value(const ::cmoon_msgs::Pose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbcfa53d5e4d8be1eULL;
  static const uint64_t static_value2 = 0xa92a3489e7b58000ULL;
};

template<class ContainerAllocator>
struct DataType< ::cmoon_msgs::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cmoon_msgs/Pose";
  }

  static const char* value(const ::cmoon_msgs::Pose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cmoon_msgs::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"float64 px\n"
"float64 py\n"
"float64 pz\n"
"float64 ox\n"
"float64 oy\n"
"float64 oz\n"
"float64 ow\n"
;
  }

  static const char* value(const ::cmoon_msgs::Pose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cmoon_msgs::Pose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.px);
      stream.next(m.py);
      stream.next(m.pz);
      stream.next(m.ox);
      stream.next(m.oy);
      stream.next(m.oz);
      stream.next(m.ow);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Pose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cmoon_msgs::Pose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cmoon_msgs::Pose_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "px: ";
    Printer<double>::stream(s, indent + "  ", v.px);
    s << indent << "py: ";
    Printer<double>::stream(s, indent + "  ", v.py);
    s << indent << "pz: ";
    Printer<double>::stream(s, indent + "  ", v.pz);
    s << indent << "ox: ";
    Printer<double>::stream(s, indent + "  ", v.ox);
    s << indent << "oy: ";
    Printer<double>::stream(s, indent + "  ", v.oy);
    s << indent << "oz: ";
    Printer<double>::stream(s, indent + "  ", v.oz);
    s << indent << "ow: ";
    Printer<double>::stream(s, indent + "  ", v.ow);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CMOON_MSGS_MESSAGE_POSE_H
