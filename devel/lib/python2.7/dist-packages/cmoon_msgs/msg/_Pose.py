# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cmoon_msgs/Pose.msg. Do not edit."""
import codecs
import sys

python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Pose(genpy.Message):
    _md5sum = "bcfa53d5e4d8be1ea92a3489e7b58000"
    _type = "cmoon_msgs/Pose"
    _has_header = False  # flag to mark the presence of a Header object
    _full_text = """string name
float64 px
float64 py
float64 pz
float64 ox
float64 oy
float64 oz
float64 ow"""
    __slots__ = ['name', 'px', 'py', 'pz', 'ox', 'oy', 'oz', 'ow']
    _slot_types = ['string', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64']

    def __init__(self, *args, **kwds):
        """
        Constructor. Any message fields that are implicitly/explicitly
        set to None will be assigned a default value. The recommend
        use is keyword arguments as this is more robust to future message
        changes.  You cannot mix in-order arguments and keyword arguments.

        The available fields are:
           name,px,py,pz,ox,oy,oz,ow

        :param args: complete set of field values, in .msg order
        :param kwds: use keyword arguments corresponding to message field names
        to set specific fields.
        """
        if args or kwds:
            super(Pose, self).__init__(*args, **kwds)
            # message fields cannot be None, assign default values for those that are
            if self.name is None:
                self.name = ''
            if self.px is None:
                self.px = 0.
            if self.py is None:
                self.py = 0.
            if self.pz is None:
                self.pz = 0.
            if self.ox is None:
                self.ox = 0.
            if self.oy is None:
                self.oy = 0.
            if self.oz is None:
                self.oz = 0.
            if self.ow is None:
                self.ow = 0.
        else:
            self.name = ''
            self.px = 0.
            self.py = 0.
            self.pz = 0.
            self.ox = 0.
            self.oy = 0.
            self.oz = 0.
            self.ow = 0.

    def _get_types(self):
        """
        internal API method
        """
        return self._slot_types

    def serialize(self, buff):
        """
        serialize message into buffer
        :param buff: buffer, ``StringIO``
        """
        try:
            _x = self.name
            length = len(_x)
            if python3 or type(_x) == unicode:
                _x = _x.encode('utf-8')
                length = len(_x)
            buff.write(struct.Struct('<I%ss' % length).pack(length, _x))
            _x = self
            buff.write(_get_struct_7d().pack(_x.px, _x.py, _x.pz, _x.ox, _x.oy, _x.oz, _x.ow))
        except struct.error as se:
            self._check_types(
                struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
        except TypeError as te:
            self._check_types(
                ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

    def deserialize(self, str):
        """
        unpack serialized message in str into this message instance
        :param str: byte array of serialized message, ``str``
        """
        codecs.lookup_error("rosmsg").msg_type = self._type
        try:
            end = 0
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
                self.name = str[start:end].decode('utf-8', 'rosmsg')
            else:
                self.name = str[start:end]
            _x = self
            start = end
            end += 56
            (_x.px, _x.py, _x.pz, _x.ox, _x.oy, _x.oz, _x.ow,) = _get_struct_7d().unpack(str[start:end])
            return self
        except struct.error as e:
            raise genpy.DeserializationError(e)  # most likely buffer underfill

    def serialize_numpy(self, buff, numpy):
        """
        serialize message with numpy array types into buffer
        :param buff: buffer, ``StringIO``
        :param numpy: numpy python module
        """
        try:
            _x = self.name
            length = len(_x)
            if python3 or type(_x) == unicode:
                _x = _x.encode('utf-8')
                length = len(_x)
            buff.write(struct.Struct('<I%ss' % length).pack(length, _x))
            _x = self
            buff.write(_get_struct_7d().pack(_x.px, _x.py, _x.pz, _x.ox, _x.oy, _x.oz, _x.ow))
        except struct.error as se:
            self._check_types(
                struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
        except TypeError as te:
            self._check_types(
                ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

    def deserialize_numpy(self, str, numpy):
        """
        unpack serialized message in str into this message instance using numpy for array types
        :param str: byte array of serialized message, ``str``
        :param numpy: numpy python module
        """
        codecs.lookup_error("rosmsg").msg_type = self._type
        try:
            end = 0
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
                self.name = str[start:end].decode('utf-8', 'rosmsg')
            else:
                self.name = str[start:end]
            _x = self
            start = end
            end += 56
            (_x.px, _x.py, _x.pz, _x.ox, _x.oy, _x.oz, _x.ow,) = _get_struct_7d().unpack(str[start:end])
            return self
        except struct.error as e:
            raise genpy.DeserializationError(e)  # most likely buffer underfill


_struct_I = genpy.struct_I


def _get_struct_I():
    global _struct_I
    return _struct_I


_struct_7d = None


def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
